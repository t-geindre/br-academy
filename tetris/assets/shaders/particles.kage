package shaders
//kage:unit pixels

const PARTICLE_COUNT = 48

var Time float

func hash(n float) float {
	return fract(sin(n)*43758.5453123)
}

func softCircle(uv, center vec2, radius, softness float) float {
	d := distance(uv, center)
	return smoothstep(radius, radius - softness, d)
}

func Fragment(pos vec4, localPos vec2, _col vec4) vec4 {
    col := vec4(0)
    canvas := imageSrc0Size()

	for i := 0; i < PARTICLE_COUNT; i++ {
        fi := float(i)
        h1 := hash(fi * 1.28)
        h2 := hash(fi * 4.56)
        h3 := hash(fi * 7.89)


        // Init position
        partPos := vec2(h1, h2) * canvas

        // Part y move
        partYPhase := h3 * 200
        partYSpeed := (h1+h2)/2 * 50 + 150
        partYAmp := h2 * 100
        partPos.y = partPos.y + sin((Time/partYSpeed)+partYPhase)*partYAmp

        // Scale, softness, alpha
        partSize := (h3+h2)/2 * 50 + 50
        partSoft := h1 * 20 + 30
        partAlpha := h3 * .3 + .1

        v := softCircle(localPos, partPos, partSize, partSoft) * partAlpha
		col += vec4(v,v,v,v)
	}

	return col
}
