package shaders
//kage:unit pixels

const PARTICLE_COUNT = 48

var Time float

func hash(n float) float {
	return fract(sin(n)*43758.5453123)
}

func softCircle(uv, center vec2, radius, softness float) float {
	d := distance(uv, center)
	return smoothstep(radius, radius - softness, d)
}

func Fragment(pos vec4, localPos vec2, _col vec4) vec4 {
    col := vec4(0)
    canvas := imageSrc0Size()

	for i := 0; i < PARTICLE_COUNT; i++ {
        fi := float(i)

        // Init position
        partPos := vec2(hash(fi*1.28), hash(fi*4.56)) * canvas

        // Part y move
        partYDir := hash(fi*5.67) * 2.0 - 1.0
        partYSpeed := hash(fi*8.90) * 200 + 200
        partYTime := hash(fi*11.12) * 100
        partPos.y = partPos.y + sin((Time+partYTime)/partYSpeed) * partYDir * 100

        // Part x move
        partXDir := hash(fi*2.34) * 2.0 - 1.0
        partXSpeed := hash(fi*3.45) * 200 + 200
        partXTime := hash(fi*6.78) * 100
        partPos.x = partPos.x + sin((Time+partXTime)/partXSpeed/2) * partXDir * 100

        // Scale, softness, alpha
        partSize := hash(fi*7.89) * 50 + 50
        partSoft := hash(fi*10.11) * 20 + 30
        partAlpha := hash(fi*12.13) * .2 + .1

        v := softCircle(localPos, partPos, partSize, partSoft) * partAlpha
		col += vec4(v,v,v,v)
	}

	return col
}
